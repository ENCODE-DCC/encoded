/* Variables */
$mainThemeColor: 			   #e8ecef; /* i.e. the background color ..for now */

$nav-color-bg:                 #0a253d; // Navigation background color

$appVersionHeight:             30px;
$footerHeight: 				   80px + $appVersionHeight;
$footerTopBorderHeight:		   0px;
$footerBackground:             rgba(10,37,61,0.3) !default;
$footerBackgroundHighlight:    #294b6a !default;

$tableHeadFootBackgroundColor: #f5f5f5;

$std-href-color:               #428bca;

$mobile-font-factor:           1.2; // Amount text increases size on mobile
$print-font-factor:            0.95; // Amount text decreases size when printing


// Pass value with CSS units and get just the value back
@function strip-units($value) {
    @return $value / ($value * 0 + 1);
}

// rem font sizing with pre-CSS3 fallback. Pass "true" in 2nd parm to add !important
// Conversions from px (not exact -- just convenient)
// 10px: 0.7
// 11px: 0.8
// 12px: 0.85
// 13px: 0.9
// 14px: 1.0
// 15px: 1.1
// 16px: 1.2
// 18px: 1.3
// 20px: 1.4

@mixin font-size($size, $important: false) {
    $imptext: "";
    @if $important {
        $imptext: " !important";
    }
    font-size: round($size * strip-units($font-size-base)) + px#{$imptext};
    font-size: $size + rem#{$imptext};
}


/* BASE STYLES */
/* Note: most base styles handled by Bootstrap, with variable settings in bootstrap/_variables.scss */

html {
    font-size: $font-size-base * $mobile-font-factor;

    @media screen and (min-width: $screen-sm-min) {
        font-size: $font-size-base;
    }

    @media print {
        font-size: $font-size-base * $print-font-factor;
    }
}

body { background: $mainThemeColor; font-size: 1rem; }

.float-wrap { overflow: hidden; }

[hidden] { display: none !important; }

#slot-application {
	height: 100vh;
}

#application {
    min-height: 100%;

    @media screen and (min-width: $screen-sm-min) {
        display: flex;
        flex-direction: column;
    }
}

#page-footer {
    @media screen and (min-width: $screen-sm-min) {
        flex-shrink: 0;
    }
}

hr { clear: both; }

figure {
	img { max-width: 100%; height: auto; }
	margin-bottom: 1em;
}

.sentence-case-block {
    display: inline-block;

    &::first-letter,
    &:first-letter {
        text-transform: uppercase;
    }
}

.sentence-case::first-letter { text-transform: uppercase; }
.sentence-case:first-letter { text-transform: uppercase; } // older browser support

// Replace Bootstrap's header sizes
h1, .h1 { font-size: 2.6rem; }
h2, .h2 { font-size: 2.1rem; }
h3, .h3 { font-size: 1.7rem; }
h4, .h4 { font-size: 1.3rem; }
h5, .h5 { font-size: 1rem; }
h6, .h6 { font-size: 0.85rem; }

blockquote {
    font-size: 1rem;
}


.replacement-accessions {
    margin: -5px 0 10px;
    color: #808080;

    h4 {
        margin: 0;
        font-size: 1rem;
        font-weight: normal;
        line-height: 1.3;
    }

    @at-root #{&}__superseded-by {
        color: #000;

        a {
            font-weight: bold;
        }
    }
}


*, *:after, *:before {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

.browser-error {
    margin: 10px;
    text-align: center;
}


.checkbox--right {
	cursor: normal;

	label {
		cursor: default;
	}

	input[type="checkbox"] {
		float: none;
		margin-left: 10px;
	}
}


// Calculate lightness using a smarter algorithm than Sass's `lightness`.
// https://medium.com/@tonipinel/how-to-get-an-accurate-contrast-color-with-sass-b0ebc01bf17f
@function re-gamma($n) {
    @if $n <= 0.0031308 {
        @return $n * 12.92;
    } @else {
        @return 1.055 * pow($n, 1 / 2.4) - 0.055;
    }
}

@function de-gamma($n) {
    @if $n <= 0.04045 {
        @return $n / 12.92;
    } @else {
        @return pow((($n + 0.055) / 1.055), 2.4);
    }
}

 @function brightness($c) {
	$rlin: de-gamma(red($c) / 255);
	$glin: de-gamma(green($c) / 255);
	$blin: de-gamma(blue($c) / 255);
	@return re-gamma(0.2126 * $rlin + 0.7152 * $glin + 0.0722 * $blin) * 100;
}
