[app:app]
use = egg:encoded
annotations_path = ${annotations_path}
aws_ip_ranges_path = ${aws_ip_ranges_path}
download_proxy = https://download.encodeproject.org/
elasticsearch.server = ${elasticsearch.server}
file_upload_bucket = encoded-files-dev
file_upload_profile_name = ${file_upload_profile_name}
ontology_path = ${ontology_path}

auth0.siteName = ENCODE DCC Submission
postgresql.statement_timeout = 120
pyramid.default_locale_name = en
sqlalchemy.url = postgresql:///encoded
retry.attempts = 3

# Only run ec2metadata on ec2 instances
# XXX really need to reorganise ini files for more reuse
hostname_command = command -v ec2metadata > /dev/null && ec2metadata --public-hostname || hostname

multiauth.policies = auth0 session remoteuser accesskey
multiauth.groupfinder = encoded.authorization.groupfinder
multiauth.policy.auth0.use = encoded.authentication.NamespacedAuthenticationPolicy
multiauth.policy.auth0.base = encoded.auth0.Auth0AuthenticationPolicy
multiauth.policy.auth0.namespace = auth0
multiauth.policy.session.use = encoded.authentication.NamespacedAuthenticationPolicy
multiauth.policy.session.base = pyramid.authentication.SessionAuthenticationPolicy
multiauth.policy.session.namespace = mailto
multiauth.policy.remoteuser.use = encoded.authentication.NamespacedAuthenticationPolicy
multiauth.policy.remoteuser.namespace = remoteuser
multiauth.policy.remoteuser.base = pyramid.authentication.RemoteUserAuthenticationPolicy
multiauth.policy.accesskey.use = encoded.authentication.NamespacedAuthenticationPolicy
multiauth.policy.accesskey.namespace = accesskey
multiauth.policy.accesskey.base = encoded.authentication.BasicAuthAuthenticationPolicy
multiauth.policy.accesskey.check = encoded.authentication.basic_auth_check
# Direct file transfer from external AWS S3 to internal S3 bucket
external_aws_s3_transfer_allow = ${external_aws_s3_transfer_allow}
external_aws_s3_transfer_buckets = ${external_aws_s3_transfer_buckets}
# Public bucket
pds_private_bucket = ${pds_private_bucket}
pds_public_bucket = ${pds_public_bucket}

embed_cache.capacity = 5000

[composite:indexer]
use = egg:encoded#indexer
app = app
path = /index
timeout = 60
set embed_cache.capacity = 5000
set indexer = true
set stage_for_followup = vis_indexer, region_indexer
set queue_type = ${primary_indexer_queue_type}
set queue_server = ${primary_indexer_queue_server}
set queue_port = 6379
set queue_host = localhost
set queue_worker = ${primary_indexer_queue_worker}
set queue_worker_processes = ${primary_indexer_queue_worker_processes}
set queue_worker_chunk_size = ${primary_indexer_queue_worker_chunk_size}
set queue_worker_batch_size = ${primary_indexer_queue_worker_batch_size}
set queue_worker_get_size = ${primary_indexer_queue_worker_get_size}

[composite:visindexer]
use = egg:encoded#indexer
app = app
path = /index_vis
timeout = 60
set embed_cache.capacity = 5000
set visindexer = true

[composite:regionindexer]
use = egg:encoded#indexer
app = app
path = /index_region
timeout = 60
set embed_cache.capacity = 5000
set regionindexer = true

[filter:memlimit]
use = egg:encoded#memlimit
rss_limit = 500MB
