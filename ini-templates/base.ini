[app:app]
use = egg:encoded

accel_redirect_header = X-Accel-Redirect
aws_ip_ranges_path = aws-ip-ranges.json
auth0.siteName = ENCODE DCC Submission
download_proxy = https://download.encodeproject.org/
embed_cache.capacity = 5000
external_aws_s3_transfer_allow = false
external_aws_s3_transfer_buckets = .aws/direct-external-s3-list
file_upload_bucket = encoded-files-dev
file_upload_profile_name = encoded-files-upload
hostname_command = command -v ec2metadata > /dev/null && ec2metadata --public-hostname || hostname
multiauth.policies = auth0 session remoteuser accesskey
multiauth.groupfinder = encoded.authorization.groupfinder
multiauth.policy.auth0.use = encoded.authentication.NamespacedAuthenticationPolicy
multiauth.policy.auth0.base = encoded.auth0.Auth0AuthenticationPolicy
multiauth.policy.auth0.namespace = auth0
multiauth.policy.session.use = encoded.authentication.NamespacedAuthenticationPolicy
multiauth.policy.session.base = pyramid.authentication.SessionAuthenticationPolicy
multiauth.policy.session.namespace = mailto
multiauth.policy.remoteuser.use = encoded.authentication.NamespacedAuthenticationPolicy
multiauth.policy.remoteuser.namespace = remoteuser
multiauth.policy.remoteuser.base = pyramid.authentication.RemoteUserAuthenticationPolicy
multiauth.policy.accesskey.use = encoded.authentication.NamespacedAuthenticationPolicy
multiauth.policy.accesskey.namespace = accesskey
multiauth.policy.accesskey.base = encoded.authentication.BasicAuthAuthenticationPolicy
multiauth.policy.accesskey.check = encoded.authentication.basic_auth_check
ontology_path = ontology.json
# Direct file transfer from external AWS S3 to internal S3 bucket
pds_private_bucket = encode-pds-private-dev
pds_public_bucket = encode-pds-public-dev
pyramid.default_locale_name = en
retry.attempts = 3

annotations_path = ${annotations_path}
elasticsearch.server = ${elasticsearch_server}
postgresql.statement_timeout = ${pg_statement_timeout}
sqlalchemy.url = ${sqlalchemy_url}

[composite:indexer]
use = egg:encoded#indexer
app = app
path = /index
timeout = 60
set embed_cache.capacity = 5000
set indexer = true
# Log indexing data to file
set indexer_initial_log = true
set indexer_initial_log_path = /srv/encoded/initial-indexing-times.txt
# Used to limit the indexed uuids.  Either leave blank/0 or set to a number like 10 or 1000
set indexer_short_uuids = 0
set stage_for_followup = vis_indexer, region_indexer
set queue_port = 6379
set queue_host = localhost
set queue_type = Simple
set queue_server = true
set queue_worker = true
set remote_indexing = false
set remote_indexing_threshold =

set queue_worker_processes = ${index_procs}
set queue_worker_batch_size = ${index_batch_size}
set queue_worker_chunk_size = ${index_chunk_size}
set queue_worker_get_size = ${index_get_size}
set remote_indexing = ${index_remote}
set remote_indexing_threshold = ${index_remote_threshold}

[composite:visindexer]
use = egg:encoded#indexer
app = app
path = /index_vis
timeout = 60
set embed_cache.capacity = 5000
set visindexer = true

set remote_indexing = ${remote_indexing}

[composite:regionindexer]
use = egg:encoded#indexer
app = app
path = /index_region
timeout = 60
set embed_cache.capacity = 5000
set regionindexer = true

set remote_indexing = ${remote_indexing}

[filter:memlimit]
use = egg:encoded#memlimit
rss_limit = 500MB
